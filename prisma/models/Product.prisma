model Product {
  id           String   @id @default(cuid())
  name         String
  description  String?
  sku          String
  price        Decimal  @db.Decimal(10, 2)
  distributorId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  distributor   Distributor    @relation(fields: [distributorId], references: [id])
  inventoryItems InventoryItem[]
  orderItems     OrderItem[]

  @@unique([sku, distributorId])
  @@index([distributorId])
  @@map("products")
}

model InventoryItem {
  id           String @id @default(cuid())
  productId    String
  distributorId String
  stock        Int    @default(0)
  lotNumber      String
  expirationDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  product Product @relation(fields: [productId], references: [id])
  distributor Distributor @relation(fields: [distributorId], references: [id])
  stockMovements StockMovement[]

  // Indexes & constraints
  @@index([productId, expirationDate])
  @@index([distributorId])
  @@unique([productId, lotNumber])
  @@map("inventory_items")
}

enum StockMovementType {
  INBOUND
  OUTBOUND
  ADJUSTMENT
  TRANSFER
}

model StockMovement {
  id              String            @id @default(cuid())
  inventoryItemId String
  type            StockMovementType
  quantity        Int
  previousStock   Int
  newStock        Int
  reason          String?
  orderId         String?
  createdAt       DateTime          @default(now())

  // Relationships
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])
  order         Order?        @relation(fields: [orderId], references: [id])

  @@map("stock_movements")
}