import { streamText, UIMessage, convertToModelMessages, stepCountIs } from "ai";
import { chatModel } from "@/lib/ai/provider";
import { userRepo } from "@/repositories/user.repository";
import { tools } from "@/lib/ai/tools";

export const maxDuration = 30;

const SYSTEM_PROMPT = `
Eres un asistente de pedidos para vendedores de distribuidoras. S√© amable, colaborativo y usa 1‚Äì3 emojis cuando ayuden (sin exagerar). üòäüßæ

Entrada t√≠pica: "Cliente: items". Ej.: "Supermercado Don Pepe: 10 kg queso la serenisima".

Flujo OBLIGATORIO:
1) Valida el CLIENTE: llam√° a listarClientes o buscarClientes (pod√©s filtrar por el nombre). Si no existe, inform√° claramente: "No encontr√© el cliente <nombre>." y suger√≠ los m√°s parecidos.
2) APENAS IDENTIFIQUES UN CLIENTE V√ÅLIDO, INMEDIATAMENTE llam√° a sugerirProductos para ese cliente. Esto es OBLIGATORIO y debe ser lo PRIMERO que hagas despu√©s de identificar el cliente.
3) SIEMPRE presenta las sugerencias de productos al usuario de manera positiva, mencionando motivos como "productos habituales", "expiran pronto", "populares", etc.
4) Luego, si el usuario mencion√≥ productos espec√≠ficos, identific√° productos y cantidades y consult√° stock con consultarStock.
5) Si hay datos suficientes, cre√° ORDEN BORRADOR con crearOrden.
6) ANTES de cerrar el resumen del borrador, VOLV√â A RECOMENDAR entre 1‚Äì3 productos adicionales bas√°ndote en las sugerencias obtenidas.
7) Respond√© con un resumen amigable, por ejemplo:
"üßæ Pedido para <cliente>\n- <cantidad> √ó <producto> (<sku>) ‚Äî stock: <disp>\n‚ûï Te recomiendo tambi√©n: <n> productos (ej.: <sku> <nombre> √ó <qty> ‚Äî $<precio> - <motivo>)\nüí∞ Total estimado: $<total>\nüÜî Orden borrador: <orderId>\n¬øQuer√©s confirmarlo? (s√≠/no)"
8) Si el usuario confirma ("s√≠", "ok", "confirmar"), llam√° a confirmarOrden y report√°: "‚úÖ Pedido confirmado: <orderId>".

Gu√≠as OBLIGATORIAS:
- SIEMPRE que identifiques un cliente, inmediatamente llam√° a sugerirProductos - NO es opcional.
- Las recomendaciones deben ser POSITIVAS y √öTILES, no opcionales.
- Si un vendedor consulta informaci√≥n sobre un comercio, autom√°ticamente busc√° sugerencias para ese comercio.
- Si faltan datos, ped√≠ lo m√≠nimo pero SIEMPRE mostr√° sugerencias cuando haya un cliente identificado.
- No inventes SKUs; us√° solo los datos reales del stock.
- Manten√© respuestas breves, claras y con 1‚Äì3 emojis m√°ximo.

IMPORTANTE: La funci√≥n sugerirProductos debe llamarse INMEDIATAMENTE despu√©s de identificar cualquier cliente, sin excusas ni demoras.
`;

export async function POST(req: Request) {
  const { messages, phone }: { messages: UIMessage[]; phone?: string } =
    await req.json();

  const phoneNumber = phone || "541133837591";

  try {
    // Get distributor ID and salesperson info for this phone number
    const distributorId =
      await userRepo.getSalespersonDistributorByPhone(phoneNumber);
    const salespersonId = await userRepo.getSalespersonIdByPhone(phoneNumber);

    if (!distributorId) {
      throw new Error(
        `No se encontr√≥ distribuidora para el tel√©fono ${phoneNumber}`,
      );
    }

    if (!salespersonId) {
      throw new Error(`No se encontr√≥ vendedor con tel√©fono ${phoneNumber}`);
    }

    const result = streamText({
      model: chatModel,
      messages: convertToModelMessages(messages),
      tools,
      system: SYSTEM_PROMPT,
      stopWhen: stepCountIs(8),
      experimental_context: {
        phoneNumber,
        distributorId,
        salespersonId,
      },
      onStepFinish: ({ text, toolResults, toolCalls, finishReason, usage }) => {
        console.log("Step finished:", {
          text: JSON.stringify(text),
          toolResults: JSON.stringify(toolResults),
          toolCalls: JSON.stringify(toolCalls),
          finishReason: JSON.stringify(finishReason),
          usage: JSON.stringify(usage),
        });
      },
    });

    return result.toUIMessageStreamResponse();
  } catch (error) {
    console.error("Error in chat API:", error);
    return new Response(JSON.stringify({ error: "Error processing request" }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
}
