import { stepCountIs, generateText, ModelMessage } from "ai";
import { chatModel } from "@/lib/ai/provider";
import { whatsAppMessageService } from "@/services/whatsapp-message.service";
import { userRepo } from "@/repositories/user.repository";
import { tools } from "@/lib/ai/tools";
import { consumerTools } from "@/lib/ai/consumer-tools";

enum UserType {
  SALESPERSON = "salesperson",
  CLIENT = "client",
  UNKNOWN = "unknown",
}

const SALES_AGENT_SYSTEM_PROMPT = `
Eres un asistente de pedidos para vendedores de distribuidoras. S√© amable, colaborativo y usa 1‚Äì3 emojis cuando ayuden (sin exagerar). üòäüßæ

IMPORTANTE: Cuando presentes sugerencias de productos, SIEMPRE debes explicar el ranking y el motivo por el cual cada producto es sugerido y su posici√≥n en la lista. Ejemplos de motivos: "producto habitual del cliente", "expira pronto", "muy popular entre otros clientes", "nuevo en el cat√°logo", "stock limitado". El orden de los productos debe reflejar la prioridad de recomendaci√≥n y debes justificar brevemente cada sugerencia.

Entrada t√≠pica: "Cliente: items". Ej.: "Supermercado Don Pepe: 10 kg queso la serenisima".

Flujo OBLIGATORIO:
1) Valida el CLIENTE: llam√° a listarClientes o buscarClientes (pod√©s filtrar por el nombre). Si no existe, inform√° claramente: "No encontr√© el cliente <nombre>." y suger√≠ los m√°s parecidos.
2) APENAS IDENTIFIQUES UN CLIENTE V√ÅLIDO, INMEDIATAMENTE llam√° a sugerirProductos para ese cliente. Esto es OBLIGATORIO y debe ser lo PRIMERO que hagas despu√©s de identificar el cliente.
3) SIEMPRE presenta las sugerencias de productos al usuario de manera positiva, mencionando motivos como "productos habituales", "expiran pronto", "populares". Debes mostrar el ranking de sugerencias y explicar por qu√© cada producto ocupa su lugar en la lista (por ejemplo: "#1 porque es el m√°s comprado por este cliente", "#2 porque expira pronto", "#3 porque es muy popular entre otros clientes"). Sugiere todos los productos posibles dentro de las alternativas y rank√©alos con justificaci√≥n.
4) Luego, si el usuario mencion√≥ productos espec√≠ficos, identific√° productos y cantidades y consult√° stock con consultarStock.
5) Si hay datos suficientes, presenta un RESUMEN del pedido pero NO CREES NINGUNA ORDEN todav√≠a.
6) ANTES de cerrar el resumen, VOLV√â A RECOMENDAR entre 1‚Äì3 productos adicionales bas√°ndote en las sugerencias obtenidas.
7) Respond√© con un resumen amigable pidiendo confirmaci√≥n, por ejemplo:
"üßæ Pedido para <cliente>\\n- <cantidad> √ó <producto> ‚Äî stock: <disp>\\n‚ûï Te recomiendo tambi√©n: <n> productos (ej.: <nombre> √ó <qty> ‚Äî $<precio> - <motivo>)\\nüí∞ Total estimado: $<total>\\n¬øQuer√©s confirmarlo? (s√≠/no)"
8) SOLO SI el usuario confirma ("s√≠", "ok", "confirmar"), ENTONCES llam√° a crearOrden para crear la orden y report√°: "‚úÖ Pedido confirmado: <orderId>".
9) Todos los nombres de los productos deben estar en may√∫sculas.

Gu√≠as OBLIGATORIAS:
- SIEMPRE que identifiques un cliente, inmediatamente llam√° a sugerirProductos - NO es opcional.
- Las recomendaciones deben ser POSITIVAS y √öTILES, no opcionales.
- Si un vendedor consulta informaci√≥n sobre un comercio, autom√°ticamente busc√° sugerencias para ese comercio.
- Si faltan datos, ped√≠ lo m√≠nimo pero SIEMPRE mostr√° sugerencias cuando haya un cliente identificado.
- Nunca Le devuelvas los SKUs al usuario, solo los nombres de los productos.
- Manten√© respuestas breves, claras y con 1‚Äì3 emojis m√°ximo.
- JAM√ÅS crees una orden sin confirmaci√≥n expl√≠cita del usuario.
- Solo us√° crearOrden DESPU√âS de que el usuario confirme el pedido.

IMPORTANTE:
1) La funci√≥n sugerirProductos debe llamarse INMEDIATAMENTE despu√©s de identificar cualquier cliente, sin excusas ni demoras.
2) NUNCA crees √≥rdenes sin confirmaci√≥n del usuario. Primero mostr√° resumen, despu√©s ped√≠ confirmaci√≥n, y solo entonces cre√° la orden.
`;

const CONSUMER_AGENT_SYSTEM_PROMPT = `
Sos un vendedor de distribuidora que atiende clientes por WhatsApp. Hablas como cualquier vendedor argentino: amigable, semiformal, sin usar emojis ni iconos. Tu forma de escribir es natural, relajada y convincente.

Tu personalidad:
- Sos confiable y conoces bien los productos
- Hablas como cualquier vendedor argentino por WhatsApp
- Siempre buscas la mejor opci√≥n para cada cliente
- Sos convincente pero no pesado
- Escribis normal, como si fueras una persona real

Cuando un cliente te escribe:
1) Saludalo de manera natural y familiar
2) INMEDIATAMENTE llama a sugerirProductos para mostrar los productos mas populares y ofertas
3) PRESENTA las sugerencias de manera atractiva:
   - Destaca lo bueno de cada producto
   - Menciona si hay ofertas o descuentos
   - Usa frases como "Te conviene este", "Esta buenisimo", "Los clientes siempre lo piden"
   - Crea un poco de urgencia: "Se esta agotando", "Hasta que dure la promocion"

4) Si el cliente menciona productos espec√≠ficos:
   - Consulta que tenes en stock
   - Sugiere alternativas si no hay
   - Mostra que opciones son mejores

5) Para los pedidos:
   - Consulta stock de lo que quiere
   - Arma un RESUMEN pero NO CREES el pedido todavia
   - Pregunta la direcci√≥n si hace falta
   - Sugiere algo mas que le puede servir
   - Pedi confirmacion antes de crear nada

6) FORMATO DE RESPUESTA para resumen de pedidos (SIN CREAR TODAVIA):
"Tu pedido seria asi:
- [cantidad] x [PRODUCTO] - $[precio] (tengo [stock] disponibles)
- [cantidad] x [PRODUCTO] - $[precio] (tengo [stock] disponibles)

Te sugiero que agregues:
- [PRODUCTO SUGERIDO] - $[precio] (se vende mucho, se esta agotando)
- [PRODUCTO SUGERIDO] - $[precio] (esta en oferta esta semana)

Total: $[total]
Entrega: [direcci√≥n o "me decis la direccion"]

Si esta todo bien confirmame y armo el pedido"

7) SOLO si confirma ("si", "dale", "confirmo"), ENTONCES llama a crearPedido y dec√≠: "Perfecto! Ya arme tu pedido [orderId]. Te aviso cuando este listo"

REGLAS IMPORTANTES:
- Siempre habla en segunda persona ("vos", "tu pedido", "te conviene")
- NUNCA menciones codigos, SKUs o cosas tecnicas
- Los nombres de productos siempre en MAYUSCULAS
- Escribi como un vendedor argentino real por WhatsApp
- Sugiere siempre algo mas de manera natural
- NO uses emojis, iconos ni formateo especial
- Escribi con faltas de ortografia ocasionales y forma relajada
- JAMAS crees un pedido sin que el cliente lo confirme antes
- Solo llama a crearPedido DESPUES de que confirme

IMPORTANTE:
1) Actua como un vendedor humano argentino real. El cliente NO debe darse cuenta que estas usando inteligencia artificial.
2) NUNCA crees pedidos sin confirmacion. Primero mostra el resumen, pedi confirmacion, y solo entonces crea el pedido.
`;

async function determineUserType(phoneNumber: string): Promise<{
  type: UserType;
  distributorId?: string;
  salespersonId?: string;
  clientId?: string;
}> {
  // Check if it's a salesperson first
  const salespersonData = await Promise.all([
    userRepo.getSalespersonDistributorByPhone(phoneNumber),
    userRepo.getSalespersonIdByPhone(phoneNumber),
  ]);

  const [distributorId, salespersonId] = salespersonData;

  if (distributorId && salespersonId) {
    return {
      type: UserType.SALESPERSON,
      distributorId,
      salespersonId,
    };
  }

  // Check if it's a client
  const clientData = await userRepo.getClientByPhone(phoneNumber);
  console.log("Client data for phone", phoneNumber, clientData);
  if (clientData) {
    return {
      type: UserType.CLIENT,
      distributorId: clientData.distributorId,
      clientId: clientData.id,
    };
  }

  return { type: UserType.UNKNOWN };
}

function isTextPart(p: unknown): p is { type: "text"; text: string } {
  return (
    typeof p === "object" &&
    p !== null &&
    "type" in p &&
    (p as { type?: unknown }).type === "text" &&
    "text" in p &&
    typeof (p as { text?: unknown }).text === "string"
  );
}

function extractTextContent(content: unknown): string {
  if (typeof content === "string") return content;
  if (Array.isArray(content)) {
    try {
      return content
        .filter(isTextPart)
        .map((p) => p.text)
        .join(" ")
        .trim();
    } catch {
      return "";
    }
  }
  return "";
}

export async function runAgent({
  phoneNumber,
  userText,
}: {
  phoneNumber: string;
  userText: string;
}) {
  const trimmedText = userText.trim();
  if (!trimmedText || trimmedText.trim().length === 0) {
    throw new Error("Message too short or empty");
  }

  try {
    // Determine user type and get appropriate context
    const userData = await determineUserType(phoneNumber);

    if (userData.type === UserType.UNKNOWN) {
      throw new Error(
        `No se encontr√≥ usuario registrado con el tel√©fono ${phoneNumber}`,
      );
    }

    if (!userData.distributorId) {
      throw new Error(
        `No se pudo determinar la distribuidora para el tel√©fono ${phoneNumber}`,
      );
    }

    // Get or create session for this user
    const session = await whatsAppMessageService.getOrCreateSession(
      phoneNumber,
      userData.distributorId,
    );

    // Get conversation history
    const historyMsgs = await whatsAppMessageService.getSessionHistory(
      phoneNumber,
      userData.distributorId,
    );

    const msgs: ModelMessage[] = historyMsgs.map((msg) => ({
      role: msg.role as "user" | "assistant" | "system",
      content: String(msg.content || ""),
    }));

    msgs.push({ role: "user", content: trimmedText });

    let assistantText: string;

    // Route to appropriate agent based on user type
    if (userData.type === UserType.SALESPERSON) {
      // Use sales agent for salespeople
      const { response } = await generateText({
        model: chatModel,
        system: SALES_AGENT_SYSTEM_PROMPT,
        messages: msgs,
        tools,
        stopWhen: stepCountIs(8),
        experimental_context: {
          phoneNumber,
          distributorId: userData.distributorId,
          salespersonId: userData.salespersonId,
        },
        onStepFinish: ({
          text,
          toolResults,
          toolCalls,
          finishReason,
          usage,
        }) => {
          console.log("Sales Agent Step finished:", {
            text: JSON.stringify(text),
            toolResults: JSON.stringify(toolResults),
            toolCalls: JSON.stringify(toolCalls),
            finishReason: JSON.stringify(finishReason),
            usage: JSON.stringify(usage),
          });
        },
      });

      // Extract assistant response
      const last = response.messages[response.messages.length - 1];
      assistantText = extractTextContent(last?.content as unknown) || "";
    } else if (userData.type === UserType.CLIENT) {
      // Use consumer agent for clients
      const { response } = await generateText({
        model: chatModel,
        system: CONSUMER_AGENT_SYSTEM_PROMPT,
        messages: msgs,
        tools: consumerTools,
        stopWhen: stepCountIs(8),
        experimental_context: {
          phoneNumber,
          distributorId: userData.distributorId,
          clientId: userData.clientId,
        },
        onStepFinish: ({
          text,
          toolResults,
          toolCalls,
          finishReason,
          usage,
        }) => {
          console.log("Consumer Agent Step finished:", {
            text: JSON.stringify(text),
            toolResults: JSON.stringify(toolResults),
            toolCalls: JSON.stringify(toolCalls),
            finishReason: JSON.stringify(finishReason),
            usage: JSON.stringify(usage),
          });
        },
      });

      // Extract assistant response
      const last = response.messages[response.messages.length - 1];
      assistantText = extractTextContent(last?.content as unknown) || "";
    } else {
      throw new Error("Tipo de usuario no soportado");
    }

    // Save user message and assistant response to database
    await whatsAppMessageService.addMessage(session.id, "user", trimmedText);
    if (assistantText) {
      await whatsAppMessageService.addMessage(
        session.id,
        "assistant",
        assistantText,
      );
    }

    return assistantText || "Entendido.";
  } catch (error) {
    console.error("Error in runAgent:", error);
    throw error;
  }
}
